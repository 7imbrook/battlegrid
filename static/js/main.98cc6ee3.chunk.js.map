{"version":3,"sources":["components/grid2/Overlay2.tsx","components/grid2/util.ts","components/grid2/Viewport.tsx","components/grid2/Grid.tsx","components/util/useDrop.ts","components/toolbar/Toolbar.tsx","App.tsx","redux/modules/grid.ts","redux/index.ts","index.tsx"],"names":["React","memo","props","style","position","left","top","width","height","backgroundPosition","background","clamp","val","min","max","Math","Viewport","forwardRef","ref","viewport","useRef","canvas","transform","scale","offset","setTransform","f","newT","current","newOffset","console","log","fontSize","baseScalar","baseUnit","scrollTo","initialScale","useGesture","onPinchEnd","onPinch","state","event","preventDefault","stopPropagation","newScale","deltaY","origin","clientToGrid","clientX","clientY","delta","da","initial","oldScale","t","performZoom","onPinchStart","useCallback","domTarget","eventOptions","passive","capture","coord","rect","getBoundingClientRect","useImperativeHandle","scroll","onScrollEnd","pinching","scrollLeft","scrollTop","className","children","gridDrag","dropLayer","hoverHint","useState","items","setItems","onDrag","onDrop","dragDepth","setDragDepth","x","y","dragState","setDragState","onDragEnter","ev","d","onDragLeave","onDragOver","useDrop","coords","floor","dataItems","dataTransfer","addItem","s","i","item","id","random","href","length","kind","startsWith","window","URL","createObjectURL","getAsFile","type","getAsString","dragging","drag","dragHandlers","dimensions","key","map","alt","src","display","Toolbar","getRandomInt","App","connect","setRect","setX","setY","onClick","initialState","zoom","rootReducer","combineReducers","grid","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98cc6ee3.chunk.js","sourcesContent":["import React from \"react\";\nimport { GridSpace } from \"./Viewport\";\nimport { Coord } from \"./util\";\n\nexport interface OverlayProps {\n  width: number,\n  height: number,\n  onDrop?: (coord: Coord<GridSpace>) => void;\n}\n\nconst thickness = \"0.05em\"\nfunction Overlay2(props: OverlayProps) {\n  return (<div style={{\n    position: \"absolute\",\n    left: \"0\",\n    top: \"0\",\n    width: props.width + 'em',\n    height: props.height + 'em',\n    backgroundPosition: \"top left\",\n    background: `repeating-linear-gradient(to right, grey, grey ${thickness}, transparent ${thickness} 1em), repeating-linear-gradient(to bottom, grey, grey ${thickness}, transparent ${thickness} 1em)`,\n  }}></div>\n  );\n}\nexport default React.memo(Overlay2);","\ninterface Unit<T> {\n    _unitBrand: T\n}\nexport type Coord<T> = [number & Unit<T>, number & Unit<T>] & Unit<'coord'>\nexport type Offset<T> = [number & Unit<T>, number & Unit<T>] & Unit<'offset'>\nexport type Pair<T> = Coord<T> | Offset<T>\n\nexport function add<T>(a: Offset<T>, b: Offset<T>): Offset<T>;\nexport function add<T>(a: Coord<T>, b: Offset<T>): Coord<T>\nexport function add<T>(a: [number, number], b: [number,number]): [number,number] {\n    return [a[0] + b[0], a[1] + b[1]] as any;\n}\n\nexport function sub<T>(a: Offset<T>, b: Offset<T>): Offset<T>;\nexport function sub<T>(a: Coord<T>, b: Offset<T>): Coord<T>\nexport function sub<T>(a: [number, number], b: [number,number]): [number,number] {\n    return [a[0] - b[0], a[1] - b[1]] as any;\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.min(max, Math.max(min, val));\n}\n\nexport function coord_clamp<T, P extends Pair<T>>(val: P, min: [number, number], max: [number, number]): P {\n    return [\n        Math.max(min[0], Math.min(max[0], val[0])),\n        Math.max(min[1], Math.min(max[1], val[1])),\n    ] as P;\n}","import { useRef, useCallback, PropsWithChildren, ForwardRefRenderFunction, useImperativeHandle, forwardRef, memo } from \"react\";\nimport { Coord, clamp } from \"./util\";\nimport { useGesture } from \"react-use-gesture\";\nimport { FullGestureState } from \"react-use-gesture/dist/types\";\nimport React from \"react\";\n\nexport interface ViewportProps {\n  baseScalar: number,\n  baseUnit: string,\n  height: number,\n  width: number,\n}\nexport type GridSpace = \"gridspace\";\ntype ViewSpace = \"gridspace\";\n\nconst minScale = 0.2;\nconst maxScale = 2;\n\nexport interface ViewportRef {\n  clientToGrid(coord: [number, number]): Coord<GridSpace>\n}\n\nexport interface Transform {\n  scale: number,\n  offset: Coord<ViewSpace>,\n}\n\nexport const ViewportElem: ForwardRefRenderFunction<ViewportRef, PropsWithChildren<ViewportProps>> = (props, ref) => {\n  const viewport = useRef<HTMLDivElement>(null);\n  const canvas = useRef<HTMLDivElement>(null);\n  const transform = useRef({\n    scale: 1,\n    offset: [0, 0] as Coord<GridSpace>,\n  });\n\n  const setTransform = (f: (t: Transform) => Transform) => {\n    const newT = f(transform.current);\n    const newOffset = [\n      clamp(newT.offset[0], 0, props.width),\n      clamp(newT.offset[1], 0, props.height)\n    ]\n    transform.current = {\n      scale: newT.scale,\n      offset: newOffset as any,\n    }\n    console.log(\"offset\", transform.current.offset);\n    canvas.current!.style.fontSize = `${transform.current.scale * props.baseScalar}${props.baseUnit}`\n    viewport.current!.scrollTo(transform.current.offset[0] * 96 * transform.current.scale, transform.current.offset[1] * transform.current.scale * 96)\n  }\n    // Does fancy math to zoom around a mouse location. Location given relative to viewport\n    const performZoom = \n      (origin: Coord<GridSpace>, oldScale: number, newScale: number) => {\n        const delta = clamp(newScale - oldScale, -0.05, 0.05);\n        newScale = clamp(oldScale + delta, minScale, maxScale);\n        // if we don't return early, we'll end up sliding around\n        if (newScale === oldScale) {\n          return;\n        }\n        setTransform(t => {\n          console.log(transform.current.scale);\n          return {\n            scale: newScale,\n            offset: [\n                t.offset[0] - (t.offset[0] - origin[0]) * delta / oldScale,\n                t.offset[1] - (t.offset[1] - origin[1]) * delta / oldScale,\n            ] as Coord<ViewSpace>\n          }\n        });\n      }\n  \n    // const drag = useDrag((state) => {\n    //   if (state.buttons !== 1) {\n    //     return;\n    //   }\n    //   setTransform(t => {\n    //     console.log(state);\n    //     let o = clientToGrid(sub(state.initial as Offset<ViewSpace>, state.delta as Offset<ViewSpace>));\n    //     o = coord_clamp(\n    //       o,\n    //       [0, 0],\n    //       [\n    //         props.width, props.height\n    //       ]\n    //     );\n    //     return {\n    //       ...t,\n    //       offset: o\n    //     };\n    //   });\n    // });\n  \n    const initialScale = useRef(1);\n    useGesture(\n      {\n        onPinchEnd: () => {\n          initialScale.current = transform.current.scale;\n        },\n        onPinch: \n          (state: FullGestureState<\"pinch\">) => {\n            state.event?.preventDefault();\n            state.event?.stopPropagation();\n            //@ts-ignore\n            const deltaY = state.event?.deltaY\n            const event = state.event! as any as MouseEvent;\n            const origin = \n                clientToGrid([event.clientX, event.clientY]) as Coord<\n                  ViewSpace\n              >\n            console.log(origin);\n            let newScale: number;\n            if (deltaY) {\n              let delta = -1 * deltaY * 0.05 * transform.current.scale;\n              newScale = transform.current.scale + delta;\n            } else {\n              newScale = (state.da[0] / state.initial[0] - 1) + initialScale.current!;\n            }\n            performZoom(\n              origin,\n              transform.current.scale,\n              newScale\n            );\n          },\n        onPinchStart: useCallback(\n          (state: FullGestureState<\"pinch\">) => {\n            console.log(\"pinchstarting\");\n            initialScale.current = transform.current.scale;\n          },\n          [transform]\n        ),\n      },\n      {\n        domTarget: viewport,\n        eventOptions: {\n          passive: false,\n          capture: true,\n        },\n      }\n    );\n  \n   const clientToGrid = (coord: [number, number]): Coord<GridSpace> => {\n      const rect = canvas.current!.getBoundingClientRect();\n      return [\n        (coord[0] - rect.left) / 96 / transform.current.scale,\n        (coord[1] - rect.top) / 96 / transform.current.scale,\n      ] as Coord<GridSpace>;\n    }\n  \n  useImperativeHandle(ref, () => ({\n    clientToGrid,\n  }), []);\n\n    // Wheel must come first to prevent its use by pinch,\n    // because the logic for how to zoom on each is different\n    const scroll = useGesture({\n      onScrollEnd(state: FullGestureState<'scroll'>) {\n        console.log(\"OOPS\", state.pinching);\n        setTransform(t => ({\n          ...t,\n          offset: [viewport.current!.scrollLeft / 96 / transform.current.scale, viewport.current!.scrollTop / 96 / transform.current.scale] as any,\n        }));\n      },\n    });\n    // useLayoutEffect(() => {\n    //   viewport.current?.scrollTo(...(transform.current.offset as [number, number]));\n    // }, []);\n    return (\n      <div className=\"viewport\" {...scroll()} ref={viewport}>\n        <div\n          className=\"gridsvg\"\n          ref={canvas}\n                style={{\n                  width: `${props.width}em`,\n                  height: `${props.height}em`,\n                  fontSize: `${transform.current.scale * props.baseScalar}${props.baseUnit}`,\n                  position: \"relative\",\n                }}>\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport const Viewport = memo(forwardRef(ViewportElem));","import {\n  PropsWithChildren, useRef, useState, memo,\n} from \"react\";\nimport { Coord } from \"./util\";\nimport React from \"react\";\nimport Overlay  from \"./Overlay2\";\nimport \"./grid.css\";\nimport { Viewport, GridSpace, ViewportRef } from \"./Viewport\";\nimport useDrop from \"../util/useDrop\";\n\n\nexport interface GridProps {\n  dimensions: [number, number];\n}\n\nexport function Grid(props: PropsWithChildren<GridProps>) {\n  let dropLayer = useRef<HTMLDivElement>(null);\n  let viewport = useRef<ViewportRef>(null);\n  let hoverHint = useRef<HTMLDivElement>(null);\n  let [items, setItems] = useState<any[]>([]);\n  let [dragging, drag, dragHandlers] = useDrop(dropLayer, (x, y) => {\n    if (hoverHint.current) {\n      let coords = viewport.current!.clientToGrid([x, y]);\n      hoverHint.current.style.left = Math.floor(coords[0] as number) + \"em\";\n      hoverHint.current.style.top = Math.floor(coords[1] as number) + \"em\";\n    }\n  },(ev) => {\n    let coords = viewport.current!.clientToGrid([ev.clientX, ev.clientY]);\n    console.log(\"DROP!\");\n    let dataItems = ev.dataTransfer?.items ?? [];\n    let addItem = (s: string, i: number) => {\n      console.log(\"adding item?\");\n      let item = {\n        id: \"\" + Math.random(),\n        x: Math.floor(coords[0]) + i,\n        y: Math.floor(coords[1]),\n        width: 1,\n        height: 1,\n        href: s,\n      };\n      console.log(\"DROPPING? \", item);\n      setItems([...items, item]);\n    };\n    console.log(\"event\", ev);\n    console.log(\"items\", dataItems);\n    for (let i = 0; i < dataItems.length; i++) {\n      console.log(dataItems[i]);\n      if (dataItems[i].kind.startsWith(\"image/\")) {\n        addItem(window.URL.createObjectURL(dataItems[i].getAsFile()), 0);\n      } else if (dataItems[i].type === \"text/uri-list\") {\n        dataItems[i].getAsString((s) => addItem(s, 0));\n      }\n    }\n  });\n  let gridDrag: Coord<GridSpace>;\n  if (dragging) {\n    gridDrag = viewport.current!.clientToGrid([drag.x, drag.y]);\n  }\n  return (\n    <div className=\"grid\" {...dragHandlers} ref={dropLayer}>\n      <Viewport\n        ref={viewport}\n            baseScalar={1}\n        baseUnit=\"in\"\n        width={props.dimensions[0]}\n        height={props.dimensions[1]}\n        >\n        {dragging ? <div\n          ref={hoverHint}\n          key=\"hover\"\n          style={{\n            position: \"absolute\",\n            left: Math.floor(gridDrag![0])+\"em\",\n            top: Math.floor(gridDrag![1])+\"em\",\n            width: \"1em\",\n            height: \"1em\",\n            background: \"#aaa\",\n          }}\n        ></div> : null}\n        {items.map(i => <img\n          alt=\"\"\n          key={i.id + \"\"}\n          src={i.href}\n          style={{\n            position: \"absolute\",\n            left: i.x+\"em\",\n            top: i.y+\"em\",\n            width: \"1em\",\n            height: \"1em\",\n            display: \"block\",\n          }} \n        ></img>)}\n\n        <Overlay width={props.dimensions[0]} height={props.dimensions[1]} />\n    \n      </Viewport>\n      </div>\n  );\n}\n\nexport default memo(Grid);\n","import { useState } from \"react\";\nexport interface DragState {\n  x: number,\n  y: number,\n}\n\nexport default function useDrop(\n  ref: React.RefObject<Element | null>,\n  onDrag: (x: number, y: number) => void,\n  onDrop: (ev: DragEvent) => void\n): [boolean, DragState, any] {\n  let [dragDepth, setDragDepth] = useState(0);\n  let [dragState, setDragState] = useState({\n    x: 0,\n    y: 0,\n  });\n  console.log(dragDepth)\n  const dropStub = (ev: DragEvent) => {\n    ev.preventDefault();\n    console.log(\"DROPPED!\")\n    let [x, y] = [ev.clientX, ev.clientY];\n    setDragDepth(0);\n    setDragState({\n      x,\n      y,\n    });\n    onDrop(ev);\n  };\n  const onDragEnter = (ev: DragEvent) => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    let [x, y] = [ev.clientX, ev.clientY];\n    setDragDepth(d => d + 1);\n    setDragState({\n      x,\n      y,\n    });\n  };\n  const onDragLeave = (ev: DragEvent) => {\n    ev.preventDefault();\n    ev.stopPropagation();\n    let [x, y] = [ev.clientX, ev.clientY];\n    setDragDepth(d => d - 1);\n    setDragState({\n      x,\n      y,\n    });\n    };\n  const onDragOver = (ev: DragEvent) => {\n    ev.preventDefault();\n    onDrag(ev.clientX, ev.clientY)\n  };\n    return [dragDepth > 0, dragState, {\n        onDragEnter,\n        onDragLeave,\n        onDragOver,\n        onDrop: dropStub,\n    }]\n}\n","import { PropsWithChildren } from \"react\";\nimport React from \"react\";\nimport \"./Toolbar.css\";\n\ninterface ToolbarProps {}\nfunction Toolbar(props: PropsWithChildren<ToolbarProps>) {\n    return (\n        <div className=\"toolbar\">\n            {props.children}\n        </div>);\n}\nexport default Toolbar","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/grid2/Grid\";\nimport { connect } from \"react-redux\";\nimport Toolbar from \"./components/toolbar/Toolbar\";\nimport { Offset } from \"./components/grid2/util\";\nimport { GridSpace } from \"./components/grid2/Viewport\";\n\ninterface Rect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\nfunction getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\nconst App = connect()(function App() {\n  let [,setRect] = useState<Rect>({ x: 0, y: 0, width: 2, height: 2 });\n  let [x, setX] = useState(30);\n  let [y, setY] = useState(30);\n  const click = () => {\n    setRect({\n      x: getRandomInt(5),\n      y: getRandomInt(5),\n      width: getRandomInt(5) + 1,\n      height: getRandomInt(5) + 1,\n    });\n  };\n  return (\n    <div className=\"App\">\n      <Grid dimensions={[x,y] as Offset<GridSpace>} />\n      {/* <Grid dimX={x} dimY={y}>\n        {\n          <rect\n            x={rect.x}\n            y={rect.y}\n            width={rect.width}\n            height={rect.height}\n            fill=\"red\"\n          ></rect>\n        }\n        <rect x=\"10\" y=\"10\" width=\"10\" height=\"10\" fill=\"blue\"></rect>\n      </Grid> */}\n      <Toolbar>\n      <button\n        onClick={click}\n      >\n        Add Rect\n      </button>\n      <button\n        onClick={() => setX(x => x + 1)}\n      >\n        Add Column\n      </button>\n      <button\n        onClick={() => setY(y => y + 1)}\n      >\n        Add Row \n      </button>\n\n      </Toolbar>\n    </div>\n  );\n});\n\nexport default App;\n","export interface GridState {\n  zoom: number\n}\n\ninterface ZoomAction {\n  type: 'ZOOM',\n  zoom: number\n}\n\nexport function zoom(zoom: number): ZoomAction {\n  return {\n    type: 'ZOOM',\n    zoom \n  }\n}\n\n\n\nconst initialState = {\n  zoom: 1\n}\n\nexport function gridReducer(state = initialState, action: ZoomAction): typeof initialState {\n  switch (action.type) {\n    case 'ZOOM':\n      return { zoom: action.zoom }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { gridReducer } from \"./modules/grid\";\nexport const rootReducer = combineReducers({\n  grid: gridReducer,\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { rootReducer } from './redux';\n//import * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}